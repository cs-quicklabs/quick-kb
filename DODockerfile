# Use official PHP image with necessary extensions
FROM php:8.4-fpm
# Install dependencies
RUN apt-get update && apt-get install -y \
    nginx \
    sqlite3 \
    supervisor \
    unzip \
    git \
    curl \
    libsqlite3-dev \
    nodejs \
    npm \
    gettext-base \
    && docker-php-ext-install pdo pdo_sqlite bcmath
# Set working directory
WORKDIR /var/www/html
# Copy application files
COPY . .
# Install Composer
COPY --from=composer:2 /usr/bin/composer /usr/bin/composer
RUN composer install --no-dev --optimize-autoloader
RUN npm install
# Create custom environment file
RUN echo "APP_NAME=QuickKB" > .env \
    && echo "APP_ENV=production" >> .env \
    && echo "APP_DEBUG=false" >> .env \
    && echo "DB_CONNECTION=sqlite" >> .env \
    && echo "DB_DATABASE=/var/www/html/storage/app/database.sqlite" >> .env \
    && echo "SCOUT_DRIVER=tntsearch" >> .env \
    && echo "SESSION_DRIVER=database" >> .env \
    && echo "SESSION_SECURE_COOKIE=true" >> .env
# Skip generating key in Dockerfile - we'll handle it in entrypoint
# Create directory for persistent database
RUN mkdir -p storage/app
# Touch the database file so it exists during build
RUN touch storage/app/database.sqlite
RUN chmod 777 storage/app/database.sqlite
# Create search directory
RUN mkdir -p storage/search
# Set permissions
RUN chmod -R 777 storage
RUN chmod -R 777 storage/app
RUN chmod -R 777 storage/search
RUN chmod -R 777 storage/framework/sessions
RUN chmod -R 777 storage/framework/cache
RUN chmod -R 777 storage/framework/views
RUN chmod -R 777 bootstrap/cache
# Build frontend assets
RUN npm run build
# Skip migrations during build - they'll run in entrypoint
# Only run commands that don't require encryption key during build
RUN php artisan storage:link
# Copy Nginx config
COPY docker/do-nginx.conf /etc/nginx/nginx.tpl.conf
# Expose port 8001
EXPOSE 8001
COPY docker/entrypoint.sh /usr/local/bin/entrypoint.sh
RUN chmod +x /usr/local/bin/entrypoint.sh
ENTRYPOINT ["/usr/local/bin/entrypoint.sh"]