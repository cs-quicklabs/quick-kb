# Use official PHP image with necessary extensions
FROM php:8.4-fpm

# Install dependencies
RUN apt-get update && apt-get install -y \
    nginx \
    sqlite3 \
    supervisor \
    unzip \
    git \
    curl \
    libsqlite3-dev \
    nodejs \
    npm \
    gettext-base \
    && docker-php-ext-install pdo pdo_sqlite bcmath

# Set working directory
WORKDIR /var/www/html

# Copy application files
COPY . .


# Install Composer
COPY --from=composer:2 /usr/bin/composer /usr/bin/composer

RUN composer install --no-dev --optimize-autoloader
RUN npm install

# Set up environment
RUN cp .env.example .env
RUN php artisan key:generate

# Create directories
RUN mkdir -p /app/database
RUN mkdir -p storage/search

# Optimize Laravel performance
RUN php artisan config:cache
RUN php artisan storage:link




# Clear and cache config, routes, and views
RUN php artisan cache:clear \
    && php artisan config:clear \
    && php artisan config:cache \
    && php artisan route:clear \
    && php artisan view:clear




RUN chmod -R 777 /app/database

RUN chmod -R 777 storage
RUN chmod -R 777 storage/search
RUN chmod -R 777 storage/framework/sessions
RUN chmod -R 777 storage/framework/cache
RUN chmod -R 777 storage/framework/views

RUN chmod -R 777 bootstrap/cache

RUN php artisan config:cache

RUN npm run build

# Copy Nginx config
COPY docker/do-nginx.conf /etc/nginx/nginx.tpl.conf  

# Expose port 8001
EXPOSE 8001

COPY docker/entrypoint.sh /usr/local/bin/entrypoint.sh
RUN chmod +x /usr/local/bin/entrypoint.sh

ENTRYPOINT ["/usr/local/bin/entrypoint.sh"]